{"version":3,"sources":["atoms.ts","components/CreateCategory.tsx","components/CreateTodo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","currentCategory","atom","key","default","localStorage","getItem","TO_DO","JSON","parse","categoryState","DOING","DONE","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateCategory","useRecoilState","categories","setCategory","useForm","register","handleSubmit","setValue","setError","errors","formState","onSubmit","trimmedCategory","_","trim","indexOf","oldCategories","newCategories","setItem","stringify","message","placeholder","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","newTodos","text","id","Date","now","required","ToDo","curCategory","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","map","ctg","ToDoList","console","log","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.85d815ce.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nexport enum Categories {\n  'TO_DO' = 'TO_DO',\n  'DOING' = 'DOING',\n  'DONE' = 'DONE',\n}\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\n\nexport const currentCategory = atom<string>({\n  key: 'currentCategory',\n  default:\n    localStorage.getItem('currentCategory') === null\n      ? Categories.TO_DO\n      : JSON.parse(localStorage.getItem('currentCategory') as string),\n});\n\nexport const categoryState = atom<string[]>({\n  key: 'catogory',\n  default:\n    localStorage.getItem('categoryState') === null\n      ? [Categories.TO_DO, Categories.DOING, Categories.DONE]\n      : JSON.parse(localStorage.getItem('categoryState') as string),\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: 'toDo',\n  default: JSON.parse(\n    (localStorage.getItem('toDoState') === null\n      ? '[]'\n      : localStorage.getItem('toDoState')) as string\n  ),\n});\n\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(currentCategory);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from 'react-hook-form';\nimport { useRecoilState } from 'recoil';\nimport { categoryState } from '../atoms';\nimport _ from 'lodash';\n\ninterface IForm {\n  category: string;\n}\n\nfunction CreateCategory() {\n  const [categories, setCategory] = useRecoilState(categoryState);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    setError,\n    formState: { errors },\n  } = useForm<IForm>();\n  const handleValid = ({ category }: IForm) => {\n    const trimmedCategory = _.trim(category);\n    if (_.indexOf(categories, trimmedCategory) !== -1) {\n      setError('category', { message: 'already exsist' });\n      return;\n    }\n    setCategory((oldCategories) => {\n      const newCategories = [...oldCategories, trimmedCategory];\n      localStorage.setItem('categoryState', JSON.stringify(newCategories));\n      return newCategories;\n    });\n    setValue('category', '');\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input {...register('category')} placeholder=\"Write a Category\" />\n      <button>Add</button>\n      {errors?.category?.message && <span>{errors?.category?.message}</span>}\n    </form>\n  );\n}\n\nexport default CreateCategory;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { currentCategory, toDoState } from '../atoms';\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(currentCategory);\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => {\n      const newTodos = [{ text: toDo, id: Date.now(), category }, ...oldToDos];\n      localStorage.setItem('toDoState', JSON.stringify(newTodos));\n      return newTodos;\n    });\n    setValue('toDo', '');\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'Please write a To Do',\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n      {errors?.toDo?.message && <span>{errors?.toDo?.message}</span>}\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { categoryState, currentCategory, IToDo, toDoState } from '../atoms';\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const curCategory = useRecoilValue(currentCategory);\n  const categories = useRecoilValue(categoryState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name };\n      const newTodos = [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n      localStorage.setItem('toDoState', JSON.stringify(newTodos));\n      return newTodos;\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {categories.map((ctg) => {\n        return ctg !== curCategory ? (\n          <button key={ctg} name={ctg} onClick={onClick}>\n            {ctg}\n          </button>\n        ) : null;\n      })}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { categoryState, currentCategory, toDoSelector } from '../atoms';\nimport CreateCategory from './CreateCategory';\nimport CreateToDo from './CreateTodo';\nimport ToDo from './ToDo';\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(currentCategory);\n  const categories = useRecoilValue(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    const {\n      currentTarget: { value },\n    } = event;\n    setCategory(value);\n    localStorage.setItem('currentCategory', JSON.stringify(value));\n  };\n  console.log(toDos);\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        {categories.map((ctg) => (\n          <option key={ctg} value={ctg}>\n            {ctg}\n          </option>\n        ))}\n      </select>\n      <CreateCategory />\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#2f3640',\n  textColor: 'white',\n  accentColor: '#9c88ff',\n  cardBgColor: 'transparent',\n};\n"],"sourceRoot":""}